apiVersion: skaffold/v4beta11
kind: Config
metadata:
  name: gbdi
build:
  artifacts:
    - image: gbdi/router
      context: ./modules/router
      hooks:
        before:
          - command: [ 'cp', 'modules/auth/graphql/schema.graphql', './modules/router/schemas/auth/' ]
            os: [ darwin, linux ]
          - command: [ 'cp', 'modules/organization/graphql/schema.graphql', './modules/router/schemas/organization/' ]
            os: [ darwin, linux ]
          - command: [ 'cp', 'modules/projects/graphql/schema.graphql', './modules/router/schemas/projects/' ]
            os: [ darwin, linux ]
      docker:
        dockerfile: Dockerfile


    - image: gbdi/auth
      context: ./modules/auth/
      docker:
        dockerfile: Dockerfile
        buildArgs:
          BUILD_STAGE: DEV
          BUILD_VERSION: DEV
      sync:
        infer:
          - 'src/**/*'
        hooks:
          after:
            - container:
                command:
                  - bash
                  - /app/export_schema.sh
            - host:
                command:
                  - bash
                  - modules/auth/extract_schema.sh
                os:
                  - darwin
                  - linux

    - image: gbdi/organization
      context: ./modules/organization/
      docker:
        dockerfile: Dockerfile
        buildArgs:
          BUILD_STAGE: DEV
          BUILD_VERSION: DEV
      sync:
        infer:
          - 'src/**/*'
        hooks:
          after:
            - container:
                command:
                  - bash
                  - /app/export_schema.sh
            - host:
                command:
                  - bash
                  - modules/organization/extract_schema.sh
                os:
                  - darwin
                  - linux

    - image: gbdi/projects
      context: ./modules/projects/
      sync:
        infer:
          - 'src/**/*'
        hooks:
          after:
            - container:
                command:
                  - bash
                  - /app/export_schema.sh
            - host:
                command:
                  - bash
                  - modules/projects/extract_schema.sh
                os:
                  - darwin
                  - linux
      docker:
        dockerfile: Dockerfile
        buildArgs:
          BUILD_STAGE: DEV
          BUILD_VERSION: DEV


manifests:
  helm:
    flags:
      upgrade:
        - --install
    releases:
      - name: router
        chartPath: ./modules/router/helm
        namespace: router
        setValues:
          authUrl: http://backend-service.auth:7001/api/graphql
          organizationUrl: http://backend-service.organization:7002/api/graphql
          projectsUrl: http://backend-service.projects:7003/api/graphql
          clientOrigin: http://localhost:8000
          deployType: DEV
          imageKey.registry: gbdi
          imageKey.repository: router
          imageKey.tag: latest
          router.loglevel: 'info'
        createNamespace: true

      - name: auth
        chartPath: ./modules/auth/helm
        namespace: auth
        setValues:
          deployType: DEV
          imageKey.registry: gbdi
          imageKey.repository: auth
          imageKey.tag: latest
          backend.appName: "backend-auth"
          backend.servicePort: "7001"
          backend.apiKey: fakeKey
          backend.connectionUri: http://supertokens-service.auth:3567
          backend.serverName: "Auth"
          backend.serverHost: "http://localhost:7001"
          backend.routerUrl: "http://router-service.router:7000"
          backend.logLevel: "DEBUG"
          appDomain: "localhost:8000"
          appProtocol: "http"
#          supertokens.accessTokenValidity: 45
        setValueTemplates:
          smtp.host: "{{ .SMTP_HOST }}"
          smtp.port: "{{ .SMTP_PORT }}"
          smtp.email: "{{ .SMTP_EMAIL }}"
          smtp.secret.passwordValue: "{{ .SMTP_PASSWORD }}"
          smtp.secret.usernameValue: "{{ .SMTP_USERNAME }}"
        createNamespace: true

      - name: organization
        chartPath: ./modules/organization/helm
        namespace: organization
        setValues:
          deployType: DEV
          imageKey.registry: gbdi
          imageKey.repository: organization
          imageKey.tag: latest
          backend.appName: "backend-organization"
          backend.servicePort: "7002"
          backend.authApiKey: fakeKey
          backend.authConnectionUri: http://supertokens-service.auth:3567
          backend.serverName: "Organization"
          backend.serverHost: "http://localhost:7002"
          backend.routerUrl: "http://router-service.router:7000"
          backend.logLevel: "DEBUG"
          appDomain: "localhost:8000"
          appProtocol: "http"
        createNamespace: true

      - name: projects
        chartPath: ./modules/projects/helm
        namespace: projects
        setValues:
          deployType: DEV
          imageKey.registry: gbdi
          imageKey.repository: projects
          imageKey.tag: latest
          backend.appName: "backend-projects"
          backend.servicePort: "7003"
          backend.serverName: "Projects"
          backend.authApiKey: fakeKey
          backend.authConnectionUri: http://supertokens-service.auth:3567
          backend.logLevel: "DEBUG"
          appDomain: "localhost:8000"
          appProtocol: "http"
        createNamespace: true

deploy:
  helm: { }
  kubeContext: minikube

portForward:
  - resourceType: service
    resourceName: router-service
    namespace: router
    port: 7000

  - resourceType: service
    resourceName: backend-service
    namespace: auth
    port: 7001

  - resourceType: service
    resourceName: supertokens-service
    namespace: auth
    port: 3567

  - resourceType: service
    resourceName: backend-service
    namespace: organization
    port: 7002

  - resourceType: service
    resourceName: backend-service
    namespace: projects
    port: 7003

  - resourceType: service
    resourceName: database-service
    namespace: projects
    port: 27017
    localPort: 7103
