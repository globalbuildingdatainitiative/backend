directive @oneOf on INPUT_OBJECT

schema @link(url: "https://specs.apollo.dev/federation/v2.7", import: ["@key", "@shareable"]) {
  query: Query
  mutation: Mutation
}

input AcceptInvitationInput {
  id: UUID!
  firstName: String = null
  lastName: String = null
  currentPassword: String! = "asokdA87fnf30efjoiOI**cwjkn"
  newPassword: String = null
}

"""Date with time (isoformat)"""
scalar DateTime

scalar EmailAddress

input FilterOptions {
  equal: String = null
  contains: String = null
  startsWith: String = null
  endsWith: String = null
  isTrue: Boolean = null
}

type InviteResult {
  email: String!
  status: String!
  message: String!
}

enum InviteStatus {
  ACCEPTED
  PENDING
  REJECTED
  NONE
}

input InviteUsersInput {
  emails: [String!]!
}

type Mutation {
  """Update user details"""
  updateUser(userInput: UpdateUserInput!): User!

  """Invite users to the organization"""
  inviteUsers(input: InviteUsersInput!): [InviteResult!]!

  """Accept an invitation"""
  acceptInvitation(user: AcceptInvitationInput!): Boolean!

  """Reject an invitation"""
  rejectInvitation(userId: String!): Boolean!

  """Resend an invitation"""
  resendInvitation(userId: String!): InviteResult!

  """Impersonate a different user"""
  impersonate(userId: String!): Boolean!

  """Assign admin role to a user"""
  makeAdmin(userId: String!): Boolean!
}

enum Permission {
  CONTRIBUTIONS_READ
  CONTRIBUTIONS_CREATE
  CONTRIBUTIONS_UPDATE
  CONTRIBUTIONS_DELETE
  MEMBERS_READ
  MEMBERS_CREATE
  MEMBERS_UPDATE
  MEMBERS_DELETE
  ORGANIZATIONS_CREATE
  ORGANIZATIONS_READ
  ORGANIZATIONS_UPDATE
  ORGANIZATIONS_DELETE
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!

  """Returns all Users"""
  users(filters: UserFilters = null, sortBy: UserSort = null): [User!]!

  """Returns all Roles and their permissions"""
  roles: [RolePermission!]!
}

enum Role {
  OWNER
  MEMBER
  ADMIN
}

type RolePermission {
  name: Role!
  permissions: [Permission!]!
}

scalar UUID

input UpdateUserInput {
  id: UUID!
  firstName: String
  lastName: String
  email: EmailAddress
  currentPassword: String
  newPassword: String
  invited: Boolean
  inviteStatus: InviteStatus
  inviterName: String
  role: Role
  organizationId: UUID
}

type User @key(fields: "id") {
  id: UUID!
  firstName: String
  lastName: String
  email: String!
  timeJoined: DateTime!
  organizationId: UUID @shareable
  invited: Boolean!
  inviteStatus: InviteStatus!
  inviterName: String
  roles: [Role!]
}

input UserFilters {
  id: FilterOptions = null
  firstName: FilterOptions = null
  lastName: FilterOptions = null
  email: FilterOptions = null
  organizationId: FilterOptions = null
  invited: FilterOptions = null
  inviteStatus: FilterOptions = null
  inviterName: FilterOptions = null
  timeJoined: FilterOptions = null
}

input UserSort @oneOf {
  asc: String
  dsc: String
}

scalar _Any

union _Entity = User

type _Service {
  sdl: String!
}
