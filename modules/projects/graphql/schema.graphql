type Contribution {
  project: Project!
  id: UUID!
  uploadedAt: DateTime!
  userId: UUID!
  organizationId: UUID!
}

input ContributionFilters {
  id: FilterOptions = null
  uploadAt: FilterOptions = null
  userId: FilterOptions = null
  organizationId: FilterOptions = null
}

input ContributionSort {
  id: SortOptions = null
  uploadAt: SortOptions = null
  userId: SortOptions = null
  organizationId: SortOptions = null
}

"""Date with time (isoformat)"""
scalar DateTime

input FilterOptions {
  equal: String = null
  isTrue: Boolean = null
}

input InputContribution {
  project: InputProject!
}

input InputProject {
  name: String!
}

type Mutation {
  """Creates new Contributions"""
  addContributions(contributions: [InputContribution!]!): [Contribution!]!
}

type Project {
  id: UUID!
  name: String!
}

type Query {
  _service: _Service!

  """Returns all Projects"""
  projects: [Project!]!

  """Returns all contributions assigned to user"""
  contributions(filters: ContributionFilters = null, sortBy: ContributionSort = null): [Contribution!]!
}

enum SortOptions {
  ASC
  DSC
}

scalar UUID

scalar _Any

type _Service {
  sdl: String!
}
