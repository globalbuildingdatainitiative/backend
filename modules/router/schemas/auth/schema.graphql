directive @oneOf on INPUT_OBJECT

schema @link(url: "https://specs.apollo.dev/federation/v2.7", import: ["@key", "@shareable"]) {
  query: Query
  mutation: Mutation
}

input AcceptInvitationInput {
  id: UUID!
  firstName: String = null
  lastName: String = null
  currentPassword: String! = "asokdA87fnf30efjoiOI**cwjkn"
  newPassword: String = null
}

"""Date with time (isoformat)"""
scalar DateTime

scalar EmailAddress

input FilterBy {
  equal: JSON
  contains: JSON
  startsWith: JSON
  endsWith: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  notEqual: JSON
  isTrue: Boolean
  in: JSON
}

type InviteResult {
  email: String!
  status: String!
  message: String!
}

enum InviteStatus {
  ACCEPTED
  PENDING
  REJECTED
  NONE
}

input InviteUsersInput {
  emails: [String!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

type Mutation {
  """Update user details"""
  updateUser(userInput: UpdateUserInput!): User!

  """Invite users to the organization"""
  inviteUsers(input: InviteUsersInput!): [InviteResult!]!

  """Accept an invitation"""
  acceptInvitation(user: AcceptInvitationInput!): Boolean!

  """Reject an invitation"""
  rejectInvitation(userId: String!): Boolean!

  """Resend an invitation"""
  resendInvitation(userId: String!): InviteResult!

  """Impersonate a different user"""
  impersonate(userId: String!): Boolean!

  """Assign admin role to a user"""
  makeAdmin(userId: String!): Boolean!
}

enum Permission {
  CONTRIBUTIONS_READ
  CONTRIBUTIONS_CREATE
  CONTRIBUTIONS_UPDATE
  CONTRIBUTIONS_DELETE
  MEMBERS_READ
  MEMBERS_CREATE
  MEMBERS_UPDATE
  MEMBERS_DELETE
  ORGANIZATIONS_CREATE
  ORGANIZATIONS_READ
  ORGANIZATIONS_UPDATE
  ORGANIZATIONS_DELETE
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!

  """Returns all Roles and their permissions"""
  roles: [RolePermission!]!

  """Returns all Users"""
  users: UserGraphQLResponse!
}

enum Role {
  OWNER
  MEMBER
  ADMIN
}

type RolePermission {
  name: Role!
  permissions: [Permission!]!
}

input SortBy @oneOf {
  asc: String
  dsc: String
}

scalar UUID

input UpdateUserInput {
  id: UUID!
  firstName: String
  lastName: String
  email: EmailAddress
  currentPassword: String
  newPassword: String
  invited: Boolean
  inviteStatus: InviteStatus
  inviterName: String
  role: Role
  organizationId: UUID
}

type User @key(fields: "id") {
  id: UUID!
  firstName: String
  lastName: String
  email: String!
  timeJoined: DateTime!
  organizationId: UUID @shareable
  invited: Boolean!
  inviteStatus: InviteStatus!
  inviterName: String
  roles: [Role!]
}

type UserGraphQLResponse {
  """The list of items in this pagination window."""
  items(filterBy: FilterBy = null, sortBy: SortBy = null, offset: Int! = 0, limit: Int): [User!]

  """Total number of items in the filtered dataset."""
  count(filterBy: FilterBy = null): Int!
}

scalar _Any

union _Entity = User

type _Service {
  sdl: String!
}
