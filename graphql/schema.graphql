directive @oneOf on INPUT_OBJECT

type AreaType {
  definition: String!
  unit: Unit!
  value: Float!
}

type Assembly {
  category: String
  classification: [Classification!]
  comment: String
  description: String
  id: UUID!
  metaData: JSON!
  name: String!
  products: [Product!]!
  quantity: Float!
  results: JSON!
  unit: Unit!
}

type BuildingModelScope {
  buildingServices: Boolean!
  externalWorks: Boolean!
  facilitatingWorks: Boolean!
  ffE: Boolean!
  finishes: Boolean!
  substructure: Boolean!
  superstructureEnvelope: Boolean!
  superstructureFrame: Boolean!
  superstructureInternalElements: Boolean!
}

enum BuildingType {
  renovation
  new
}

enum BuildingTypology {
  office
  residential
  public
  commercial
  industrial
  infrastructure
  agricultural
  mixeduse
  other
}

type Classification {
  code: String!
  name: String!
  system: String!
}

type Contribution {
  project: Project!
  id: UUID!
  uploadedAt: DateTime!
  userId: UUID!
  organizationId: UUID!
}

input ContributionFilters {
  id: FilterOptions = null
  uploadAt: FilterOptions = null
  userId: FilterOptions = null
  organizationId: FilterOptions = null
}

input ContributionSort {
  id: SortOptions = null
  uploadAt: SortOptions = null
  userId: SortOptions = null
  organizationId: SortOptions = null
}

type Conversion {
  metaData: String!
  to: Unit!
  value: Float!
}

enum Country {
  unknown
  afg
  ala
  alb
  dza
  asm
  and
  ago
  aia
  ata
  atg
  arg
  arm
  abw
  aus
  aut
  aze
  bhs
  bhr
  bgd
  brb
  blr
  bel
  blz
  ben
  bmu
  btn
  bol
  bes
  bih
  bwa
  bvt
  bra
  iot
  brn
  bgr
  bfa
  bdi
  cpv
  khm
  cmr
  can
  cym
  caf
  tcd
  chl
  chn
  cxr
  cck
  col
  com
  cog
  cod
  cok
  cri
  civ
  hrv
  cub
  cuw
  cyp
  cze
  dnk
  dji
  dma
  dom
  ecu
  egy
  slv
  gnq
  eri
  est
  swz
  eth
  flk
  fro
  fji
  fin
  fra
  guf
  pyf
  atf
  gab
  gmb
  geo
  deu
  gha
  gib
  grc
  grl
  grd
  glp
  gum
  gtm
  ggy
  gin
  gnb
  guy
  hti
  hmd
  vat
  hnd
  hkg
  hun
  isl
  ind
  idn
  irn
  irq
  irl
  imn
  isr
  ita
  jam
  jpn
  jey
  jor
  kaz
  ken
  kir
  prk
  kor
  kwt
  kgz
  lao
  lva
  lbn
  lso
  lbr
  lby
  lie
  ltu
  lux
  mac
  mdg
  mwi
  mys
  mdv
  mli
  mlt
  mhl
  mtq
  mrt
  mus
  myt
  mex
  fsm
  mda
  mco
  mng
  mne
  msr
  mar
  moz
  mmr
  nam
  nru
  npl
  nld
  ncl
  nzl
  nic
  ner
  nga
  niu
  nfk
  mkd
  mnp
  nor
  omn
  pak
  plw
  pse
  pan
  png
  pry
  per
  phl
  pcn
  pol
  prt
  pri
  qat
  reu
  rou
  rus
  rwa
  blm
  shn
  kna
  lca
  maf
  spm
  vct
  wsm
  smr
  stp
  sau
  sen
  srb
  syc
  sle
  sgp
  sxm
  svk
  svn
  slb
  som
  zaf
  sgs
  ssd
  esp
  lka
  sdn
  sur
  sjm
  swe
  che
  syr
  twn
  tjk
  tza
  tha
  tls
  tgo
  tkl
  ton
  tto
  tun
  tur
  tkm
  tca
  tuv
  uga
  ukr
  are
  gbr
  usa
  umi
  ury
  uzb
  vut
  ven
  vnm
  vgb
  vir
  wlf
  esh
  yem
  zmb
  zwe
}

"""Date (isoformat)"""
scalar Date

"""Date with time (isoformat)"""
scalar DateTime

type EPD {
  comment: String
  conversions: [Conversion!]
  declaredUnit: Unit!
  formatVersion: String!
  id: UUID!
  impacts: JSON!
  location: Country!
  metaData: JSON!
  name: String!
  publishedDate: Date!
  referenceServiceLife: Int
  source: Source
  standard: Standard!
  subtype: SubType!
  validUntil: Date!
  version: String!
}

union EPDTechFlow = EPD | TechFlow

input FilterOptions {
  equal: String = null
  isTrue: Boolean = null
}

enum GeneralEnergyClass {
  existing
  standard
  advanced
  unknown
}

input GraphQLInputImpactData @oneOf {
  EPD: InputEPD
  techFlow: InputTechFlow
}

input GraphQLInputProjectInfo {
  buildingInfo: InputProjectInfo = null
}

enum ImpactCategoryKey {
  gwp
  gwp_fos
  gwp_bio
  gwp_lul
  odp
  ap
  ep
  ep_fw
  ep_mar
  ep_ter
  pocp
  adpe
  adpf
  penre
  pere
  perm
  pert
  penrt
  penrm
  sm
  pm
  wdp
  irp
  etp_fw
  htp_c
  htp_nc
  sqp
  rsf
  nrsf
  fw
  hwd
  nhwd
  rwd
  cru
  mrf
  mer
  eee
  eet
}

input InputAreaType {
  definition: String!
  unit: Unit!
  value: Float!
}

input InputAssembly {
  category: String = null
  classification: [InputClassification!] = null
  comment: String = null
  description: String = null
  id: UUID
  metaData: JSON = null
  name: String!
  products: [InputProduct!]!
  quantity: Float!
  results: JSON = null
  unit: Unit!
}

input InputBuildingModelScope {
  buildingServices: Boolean!
  externalWorks: Boolean!
  facilitatingWorks: Boolean!
  ffE: Boolean!
  finishes: Boolean!
  substructure: Boolean!
  superstructureEnvelope: Boolean!
  superstructureFrame: Boolean!
  superstructureInternalElements: Boolean!
}

input InputClassification {
  code: String!
  name: String!
  system: String!
}

input InputContribution {
  project: InputProject!
}

input InputConversion {
  metaData: String
  to: Unit!
  value: Float!
}

input InputEPD {
  comment: String = null
  conversions: [InputConversion!] = null
  declaredUnit: Unit!
  formatVersion: String!
  id: UUID
  impacts: JSON!
  location: Country!
  metaData: JSON = null
  name: String!
  publishedDate: Date!
  referenceServiceLife: Int = null
  source: InputSource = null
  standard: Standard!
  subtype: SubType!
  validUntil: Date!
  version: String!
}

input InputLocation {
  address: String = null
  city: String = null
  country: Country!
}

input InputProduct {
  description: String = null
  id: UUID
  impactData: GraphQLInputImpactData!
  metaData: JSON = null
  name: String!
  quantity: Float!
  referenceServiceLife: Int!
  results: JSON = null
  transport: JSON = null
  unit: Unit!
}

input InputProject {
  assemblies: [InputAssembly!]!
  classificationSystem: String = null
  comment: String = null
  description: String = null
  formatVersion: String!
  id: UUID
  impactCategories: [ImpactCategoryKey!]!
  lciaMethod: String = null
  lifeCycleStages: [LifeCycleStage!]!
  location: InputLocation!
  metaData: JSON = null
  name: String!
  owner: String = null
  projectInfo: GraphQLInputProjectInfo = null
  projectPhase: ProjectPhase!
  referenceStudyPeriod: Int = null
  results: JSON = null
  softwareInfo: InputSoftwareInfo!
}

input InputProjectInfo {
  buildingCompletionYear: Int = null
  buildingFootprint: InputValueUnit = null
  buildingHeight: InputValueUnit = null
  buildingMass: InputValueUnit = null
  buildingModelScope: InputBuildingModelScope = null
  buildingPermitYear: Int = null
  buildingType: BuildingType
  buildingTypology: BuildingTypology
  buildingUsers: Int = null
  certifications: [String!] = null
  energyDemandElectricity: Float = null
  energyDemandHeating: Float = null
  energySupplyElectricity: Float = null
  energySupplyHeating: Float = null
  exportedElectricity: Float = null
  floorsAboveGround: Int!
  floorsBelowGround: Int = null
  frameType: String = null
  generalEnergyClass: GeneralEnergyClass
  grossFloorArea: InputAreaType!
  heatedFloorArea: InputAreaType!
  localEnergyClass: String = null
  roofType: RoofType
}

input InputSoftwareInfo {
  calculationType: String = null
  goalAndScopeDefinition: String = null
  lcaSoftware: String!
}

input InputSource {
  name: String!
  url: String = null
}

input InputTechFlow {
  comment: String = null
  conversions: [InputConversion!] = null
  declaredUnit: Unit!
  formatVersion: String!
  id: UUID
  impacts: JSON!
  location: Country!
  metaData: JSON = null
  name: String!
  source: InputSource = null
}

input InputValueUnit {
  unit: Unit!
  value: Float!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum LifeCycleStage {
  a1a3
  a4
  a5
  b1
  b2
  b3
  b4
  b5
  b6
  b7
  c1
  c2
  c3
  c4
  d
}

type Location {
  address: String
  city: String
  country: Country!
}

type Mutation {
  """Creates new Contributions"""
  addContributions(contributions: [InputContribution!]!): [Contribution!]!
}

type Product {
  description: String
  id: UUID!
  impactData: EPDTechFlow!
  metaData: JSON!
  name: String!
  quantity: Float!
  referenceServiceLife: Int!
  results: JSON!
  unit: Unit!
}

type Project {
  assemblies: [Assembly!]!
  classificationSystem: String
  comment: String
  description: String
  formatVersion: String!
  id: UUID!
  impactCategories: [ImpactCategoryKey!]!
  lciaMethod: String
  lifeCycleStages: [LifeCycleStage!]!
  location: Location!
  metaData: JSON
  name: String!
  owner: String
  projectInfo: ProjectInfo!
  projectPhase: ProjectPhase!
  referenceStudyPeriod: Int
  results: JSON
  softwareInfo: SoftwareInfo!
}

type ProjectInfo {
  buildingCompletionYear: Int
  buildingFootprint: ValueUnit
  buildingHeight: ValueUnit
  buildingMass: ValueUnit
  buildingModelScope: BuildingModelScope
  buildingPermitYear: Int
  buildingType: BuildingType!
  buildingTypology: BuildingTypology!
  buildingUsers: Int
  certifications: [String!]
  energyDemandElectricity: Float
  energyDemandHeating: Float
  energySupplyElectricity: Float
  energySupplyHeating: Float
  exportedElectricity: Float
  floorsAboveGround: Int!
  floorsBelowGround: Int
  frameType: String
  generalEnergyClass: GeneralEnergyClass!
  grossFloorArea: AreaType
  heatedFloorArea: AreaType
  localEnergyClass: String
  roofType: RoofType!
}

enum ProjectPhase {
  design
  ongoing
  built
  other
}

type Query {
  _service: _Service!

  """Returns all Projects"""
  projects: [Project!]!

  """Returns all contributions assigned to user"""
  contributions(filters: ContributionFilters = null, sortBy: ContributionSort = null): [Contribution!]!
}

enum RoofType {
  flat
  pitched
  saddle
  pyramid
  other
}

type SoftwareInfo {
  calculationType: String
  goalAndScopeDefinition: String
  lcaSoftware: String!
}

enum SortOptions {
  ASC
  DSC
}

type Source {
  name: String!
  url: String
}

enum Standard {
  en15804a1
  en15804a2
  unknown
}

enum SubType {
  generic
  specific
  industry
  representative
}

type TechFlow {
  comment: String
  conversions: [Conversion!]
  declaredUnit: Unit!
  formatVersion: String!
  id: UUID!
  impacts: JSON!
  location: Country!
  metaData: JSON!
  name: String!
  source: Source
}

scalar UUID

enum Unit {
  m
  m2
  m3
  kg
  tones
  pcs
  l
  m2r1
  km
  tones_km
  unknown
}

type ValueUnit {
  unit: Unit!
  value: Float!
}

scalar _Any

type _Service {
  sdl: String!
}
